<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-07T23:13:28+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">five-sh’s website</title><subtitle></subtitle><entry><title type="html">Week 2: Reading</title><link href="http://localhost:4000/2023/06/07/week2.html" rel="alternate" type="text/html" title="Week 2: Reading" /><published>2023-06-07T00:00:00+05:30</published><updated>2023-06-07T00:00:00+05:30</updated><id>http://localhost:4000/2023/06/07/week2</id><content type="html" xml:base="http://localhost:4000/2023/06/07/week2.html">&lt;p&gt;Last week, I had sent out the patch series duplicating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt;
atom from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. Christian, Junio, Eric and Oswald
left a few comments. One interesting change has been to the way we check
for the version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPG&lt;/code&gt; in the prereq &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPG2&lt;/code&gt;. How I originally wrote
it was&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gpg_version&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) 2.&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	say &lt;span class=&quot;s2&quot;&gt;&quot;This test requires a GPG version &amp;gt;= v2.0.0&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Now this seems absurd because if we ever see a GPG v3 or v4 or so on, this
won’t work. This can be overcome with&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) 0.&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) 1.&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
which Christian suggested and Eric suggested an improved version&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;01].&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
which makes use of glob patterns and was something that I did not even
think of.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There have also been style changes pointed out by Oswald, which led me
to think a bit more and I came up with the changes where we replace the
use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-else&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; when checking for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; options.
This has the advantage of being more readable when compared to the
previous construct.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;All of these changes have been sent out and can be seen on v3. As of the
“What’s cooking in git.git” email sent out by Junio yesterday, these
commits are on “seen”.&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-cooking-in-my-fork&quot;&gt;What’s cooking in my fork?&lt;/h4&gt;

&lt;p&gt;Apart from replying and amending the patch series according to the
reviews, I have been reading through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;.
Hariom came up with the idea of experimenting with a bridge between
both the formats. Something like&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if atom exists for pretty arg:
	use ref-filter format
else
	use pretty format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
which is great for testing ref-filter formats. So I began tweaking some
code and making changes. Nothing has been pushed yet though. I have also
been reading through log and making sense of things. Parts of code has
changed since Hariom and others worked on the project (which is obvious)
and it has become even more simpler to write good and efficient code and
to build on top of their code. It becomes even more apparent, day after
day, the power that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; hold.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from this, I’m thinking about working on other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; formats
which can be re-implemented in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. Specifically those which
make the most sense in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. This should be fun.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time,&lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">Last week, I had sent out the patch series duplicating the signature atom from pretty into ref-filter. Christian, Junio, Eric and Oswald left a few comments. One interesting change has been to the way we check for the version of GPG in the prereq GPG2. How I originally wrote it was</summary></entry><entry><title type="html">Week 1: The First Patches</title><link href="http://localhost:4000/2023/05/31/week1.html" rel="alternate" type="text/html" title="Week 1: The First Patches" /><published>2023-05-31T00:00:00+05:30</published><updated>2023-05-31T00:00:00+05:30</updated><id>http://localhost:4000/2023/05/31/week1</id><content type="html" xml:base="http://localhost:4000/2023/05/31/week1.html">&lt;p&gt;A lot of things happened this week and I don’t really know where to
begin. So I’ll start with the work I did and touch the other details
as I go through them. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in the post the post before this, I am continuing the work
that Nsengiyumva has done before me and am builiding on his work
regarding the signature format. Git already has a way to output
signatures and the information related to it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;, but
the goal here is to duplicate this format in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; so that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; can do everything that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; is already doing. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My progress can be found from branches “&lt;a href=&quot;https://github.com/five-sh/git/commits/sign1&quot;&gt;sign1&lt;/a&gt;” to “&lt;a href=&quot;https://github.com/five-sh/git/commits/sign5&quot;&gt;sign5&lt;/a&gt;”. This
process of working on this has been very informative as I was tweaking
through old log messages, particularly of &lt;a href=&quot;https://github.com/git/git&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpg-interface.{c, h}&lt;/code&gt;&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The problem with Nsengiyumva’s patches was that they were breaking CI,
specifically on linux32. So if we figure out a way to make these tests
pass, we can propose a successful change and hopefully get the patches
that Nsegiyumva has worked on, merged since it is a step towards reaching
that single interface for formats. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-is-breaking-ci&quot;&gt;What is breaking CI?&lt;/h4&gt;

&lt;p&gt;GNU Privacy Guard, that is GPG, is basically a crytographic tool that
helps make your files secure (this is really vague but see their
&lt;a href=&quot;https://gnupg.org/&quot;&gt;website&lt;/a&gt;). In Git, you can sign commits or tags with the help of GPG,
so that when you push it, people can verify and know that your change
was legitimate and has not been touched. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In this process, Git (in fact, GPG) allows you see what is going on
behind the curtain. Since what Nsengiyumva has worked on and what I am
now working on has to do with how we can customize this output to the way
we want to see it on stdout (see &lt;a href=&quot;https://git-scm.com/docs/git-log#_pretty_formats&quot;&gt;log&lt;/a&gt;), it is necessary we write tests to make
sure the output is indeed customized. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is exactly where the CI breaks. You see, there is a difference in the
way GPG outputs on stderr between different major GPG versions. Since
linux32 (on which the CI jobs also run on) only supports GPG till v1.4.2,
the test written for the format option where the whole verification
message is shown fails on linux32 but passes on all other systems for
which we run the CI jobs because all of these use GPG v2.0.0 or higher. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I refactored the test to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; script in hope of getting the test
to pass but it was in vain. So I started searching the logs.&lt;/p&gt;

&lt;h4 id=&quot;mentors&quot;&gt;Mentors&lt;/h4&gt;

&lt;p&gt;I was going through the log messages looking for something useful which
would help make this test pass on all systems. I found some commits
which were related but not really useful in this context. So I texted
Christian and Hariom saying this was the case. Since we had already
decided that we will be meeting online every Friday and it was Friday,
we discussed about this in the meet. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The meet was a great experience for me. It was the first time I talked
with my mentors and it was really exciting. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Christian suggested in the meet that we should introduce a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prereq
GPG2&lt;/code&gt;, which would exclusively use GPG v2.0.0 or higher and will exit if
it is any other version. We agreed to go with it.&lt;/p&gt;

&lt;p&gt;It was instantly clear to me the role that mentors played in a project.&lt;/p&gt;

&lt;h4 id=&quot;current-work&quot;&gt;Current Work&lt;/h4&gt;

&lt;p&gt;Along with the new prereq, I also cleaned up the code around the tests. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;While going through the code related to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; formats, I noticed
there was no test for the raw verification message format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%GG&lt;/code&gt; but didn’t
really give it much thought. After Christian looked at the final commits,
he thought it would be better to add such a test and I couldn’t agree more
so we added it.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This version can be found on branch “&lt;a href=&quot;https://github.com/five-sh/git/commits/sign5&quot;&gt;sign5&lt;/a&gt;” for which the CI is successful. This is also the version
that I sent to the mailing list and these are the first &lt;a href=&quot;https://lore.kernel.org/git/20230529192209.17747-1-five231003@gmail.com/&quot;&gt;patches&lt;/a&gt; that I 
sent to the mailing list as part of GSoC.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Also, for anyone trying to set up Mutt, if you have a GMail account or
really anything that requires a compulsory OAuth2 authentication, believe me,
you are in for real pain. There is a Red Hat post to help you with this
process but I didn’t find it &lt;em&gt;that&lt;/em&gt; helpful. You’ll be much better off
reading the README associated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutt_oauth2.py&lt;/code&gt; script instead. This
is the script which is facilitates the use of OAuth2 in Mutt.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">A lot of things happened this week and I don’t really know where to begin. So I’ll start with the work I did and touch the other details as I go through them.</summary></entry><entry><title type="html">Warming up for GSoC’23</title><link href="http://localhost:4000/2023/05/17/warming-up-for-gsoc.html" rel="alternate" type="text/html" title="Warming up for GSoC’23" /><published>2023-05-17T00:00:00+05:30</published><updated>2023-05-17T00:00:00+05:30</updated><id>http://localhost:4000/2023/05/17/warming-up-for-gsoc</id><content type="html" xml:base="http://localhost:4000/2023/05/17/warming-up-for-gsoc.html">&lt;p&gt;I have been accepted for GSoC’23 as a contributor! I will be contributing
to Git and the project I will be working on is&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt; Unify ref-filter formats with other –pretty formats &lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My proposal can be read at &lt;a href=&quot;https://docs.google.com/document/d/1JBznA5n0WdWsbEskCeXxOnQuaa0urD89VtprxstLPzo/edit?usp=sharing&quot;&gt;GSoC-Proposal&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The Git Community has been very supportive and I have learnt so much
in the time I spent with them before GSoC. Hoping that I will
continue to learn while working on this project and bond more
with the community.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My mentors are
&lt;br /&gt;
	Christian Couder &amp;lt;christian.couder@gmail.com&amp;gt; &lt;br /&gt;
	Hariom Verma &amp;lt;hariom18599@gmail.com&amp;gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The main code repo, where I’ll be working at is &lt;a href=&quot;https://github.com/five-sh/git&quot;&gt;repo&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-now&quot;&gt;What Now?&lt;/h4&gt;
&lt;p&gt;I am currently working on the duplication of the logic, in pretty, in
ref-filter. Especially on the patches that Nsengiyumva Wilberforce sent
regarding the duplication of logic that formats commit and tag signatures.
Nsengiyumva’s patches can be read on the &lt;a href=&quot;https://lore.kernel.org/git/20230311210607.64927-1-nsengiyumvawilberforce@gmail.com/&quot;&gt;mailing list&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These patches seem to breaking CI, so I am working on them (see &lt;a href=&quot;https://github.com/five-sh/git/commits/sign1&quot;&gt;branch&lt;/a&gt;)
as they are really helpful in accomplishing the goal of this project.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The code for the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter.{c, h}&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty.{c, h}&lt;/code&gt; can be read
at the &lt;a href=&quot;https://github.com/git/git&quot;&gt;git repo&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I will be updating this blog weekly on Wednesdays, tracking my progress
in that week.&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">I have been accepted for GSoC’23 as a contributor! I will be contributing to Git and the project I will be working on is</summary></entry></feed>