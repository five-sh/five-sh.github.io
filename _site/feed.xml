<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-27T01:54:36+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">five-sh’s website</title><subtitle></subtitle><entry><title type="html">Week 9: Implementing the .mailmap options</title><link href="http://localhost:4000/2023/07/26/week9.html" rel="alternate" type="text/html" title="Week 9: Implementing the .mailmap options" /><published>2023-07-26T00:00:00+05:30</published><updated>2023-07-26T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/26/week9</id><content type="html" xml:base="http://localhost:4000/2023/07/26/week9.html">&lt;p&gt;I’ve started actually implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; options into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;.
Christian, Hariom and I have decided that we will go with options spelled
out as, for example, &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(authoremail:mailmap,trim)&quot;&lt;/span&gt; refs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so that we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; by specifying “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt;” in the options of the
atom. Currently the goal is to only apply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; to the atoms
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorname, authoremail&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;committername, committeremail&lt;/code&gt; and leave
out the trailers (for now). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I started out with making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--format=&quot;%(authoremail:mailmap)&quot;&lt;/code&gt; and its
friends work. The approach taken is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_email()&lt;/code&gt; grabs the email values of a given commit
or tag buffer and modifies them according to the options given to the
atom.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; support, that is, to grab these values from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt;
instead, we need to modify this buffer so that the buffer shows the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; equivalents.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We do this by checking if we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; arg in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;person_email_atom_parser()&lt;/code&gt; and if we have one, we modify the given
buffer by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_mailmap_to_header()&lt;/code&gt; on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This buffer is then modified according to the options given, that is
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nothing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trim&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localpart&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A similar approach can also be taken to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; for the name
of an author or committer (in which case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_name()&lt;/code&gt; has to be changed).
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t pushed the changes I made to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; to email
because there are some minor things that need to be fixed.&lt;/p&gt;

&lt;h4 id=&quot;-git-status-describe-atom&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ git status describe-atom&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;According to the recent “What’s cooking” email, the describe atom patches
are ready to be merged into next. A lot of cool discussions happened
during the reviews. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Junio suggested the possiblity of having unit tests written for the
functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_arg_value()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_bool_arg()&lt;/code&gt;.
The people at Google have been working on adding a unit test suite to
Git, written in C. Unit tests help in working testing individual
functions, which is obviously a great advantage. More info about the
discussion around the adding unit tests to Git are these &lt;a href=&quot;https://lore.kernel.org/git/20230427175007.902278-1-calvinwan@google.com/&quot;&gt;patches&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Junio said that these functions would be kind of an ideal candidate for
something to run unit tests on as these functions when called can lead
to so many condidtions and we don’t really get to fully to use them
in order to test them. Also with unit tests, we have the added advantage
of documentation as unit tests give a clear understanding of what a
particular function needs to do. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another thing that was discussed was to generalize the way we parse
multiple options as we are beginning to see them more often in the
code. Junio suggested that we do something similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_config_key()&lt;/code&gt;
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.c&lt;/code&gt; in which case , we use this to parse config options like&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;section.&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;subsection.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I learnt quite a bit from these reviews and the discussions around them. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The patches that are to be merged in next are in &lt;a href=&quot;https://lore.kernel.org/git/20230723162717.68123-1-five231003@gmail.com/&quot;&gt;v4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve also made a bit of a progress on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;
where I worked on changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt;, which converts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;
placeholders to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; atoms, to return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref format&lt;/code&gt; instead
of the the placeholder length, in hope that this can then be use to pass
onto a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; function to grab the necessary values instead of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; doing all the work. Although pretty printing must be done
by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;‘til next time,
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve started actually implementing the mailmap options into ref-filter. Christian, Hariom and I have decided that we will go with options spelled out as, for example,</summary></entry><entry><title type="html">Week 8: The .mailmap options</title><link href="http://localhost:4000/2023/07/19/week8.html" rel="alternate" type="text/html" title="Week 8: The .mailmap options" /><published>2023-07-19T00:00:00+05:30</published><updated>2023-07-19T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/19/week8</id><content type="html" xml:base="http://localhost:4000/2023/07/19/week8.html">&lt;p&gt;This week I started the work on adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;.
I had been reading the &lt;a href=&quot;https://lore.kernel.org/git/20220718195102.66321-1-siddharthasthana31@gmail.com/&quot;&gt;patches&lt;/a&gt; that Siddharth Asthana sent in regards
to adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These patches are particularly interesting because of refactoring they do
before the actual addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt;. The refactoring
is done so that we can grab the headers of commits (or tags)
effectively and we also make the function that does it public so that
it can be used elsewhere. The latter change is especially important, because
that means that we can use this function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; too (although to grab
only the headers and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; for them). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The function that does the above is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_mailmap_to_header()&lt;/code&gt; and this can
be called in a seperate function, local to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;, which can be used to
replace the headers with their appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; entries. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It would also be natural to expect that we are able to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt;
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailers&lt;/code&gt; in a commit or a tag as well, since these are also a part
of the commit or tag where we find names and emails. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Actually, in the same thread that the above patches were sent to,
Christian brings up a nice use case where this might matter and suggests
a possible &lt;a href=&quot;https://lore.kernel.org/git/CAP8UFD3ohjS0p02SKwqKWBK1=sVuC9+iDT4at2R9ktCUXme9rA@mail.gmail.com/&quot;&gt;starting point&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Coming to the design, I’m not really sure what to do here. There are two
ways in which we can do things: &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Follow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt; and introduce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--[no-]use-mailmap&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for-each-ref&lt;/code&gt;
possibly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; and add new options to say atom like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authorname)&lt;/code&gt;. So
something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authorname:mailmap)&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second way is more verbose and I kind of prefer the first one
since we could do something like &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--use-mailmap&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(authorname) %(authoremail)&quot;&lt;/span&gt; refs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;the-work-on-describe-atom-in-ref-filter&quot;&gt;The work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The describe atom patches are currently in v3. I re-rolled with this
version which largely simplified things in how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom was
implemented in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-fitler&lt;/code&gt;. For parsing the describe options, we just
do &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I was worried about us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt;ing in the right places because the
implementation before this had not really taken care of it and it was
kind of hard to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; with that implementation. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Christian suggested that we split out the option parsing code from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe_atom_parser()&lt;/code&gt; so that we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; correctly. This was really
good and this makes things easier to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; whenever something goes wrong. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hariom suggested that, instead of adding new functions to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;,
we should rather refactor the functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; and make them public
so that we are able to use them here without re-implementing them. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-else-is-cooking&quot;&gt;What else is cooking?&lt;/h4&gt;
&lt;p&gt;I didn’t take out any time to work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt; (related to
Hariom’s idea) this week, which is embarrasing at this point. Was a bit
busy with college work, but I did make some progress on it though. Trying
to figure out where it will fit into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty_print_commit()&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I experimented a bit with it by trying to call it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format_commit_one()&lt;/code&gt;,
but that was a total failure. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also attended Review Club this week which discussed the addition of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(decorate:&amp;lt;options&amp;gt;)&lt;/code&gt; placeholder in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. Except for the socializing
part, I was pretty much silent and lurked in the background. I had a great
time and it was pretty fun. Thanks Glen, Jonathan, Calvin and Jacob. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">This week I started the work on adding .mailmap options to ref-filter. I had been reading the patches that Siddharth Asthana sent in regards to adding .mailmap options to cat-file.</summary></entry><entry><title type="html">Week 7: The not-so-complete describe atom</title><link href="http://localhost:4000/2023/07/12/week7.html" rel="alternate" type="text/html" title="Week 7: The not-so-complete describe atom" /><published>2023-07-12T00:00:00+05:30</published><updated>2023-07-12T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/12/week7</id><content type="html" xml:base="http://localhost:4000/2023/07/12/week7.html">&lt;p&gt;Okay. So, as I’ve written last time, I sent the patches to the mailing
list, which I thought were perfect. Turns out they weren’t. There
are many things wrong with how we implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom which
Junio pointed out in his &lt;a href=&quot;https://lore.kernel.org/git/xmqqbkgpdljy.fsf@gitster.g/&quot;&gt;reply&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First of which is, when doing something like&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(describe:tags=yes)&quot;&lt;/span&gt; refs/tags/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gives an error because according to the code, we just parse for integer
values. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.h&lt;/code&gt; has a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git_parse_maybe_bool()&lt;/code&gt; which can be
used to parse values such as “yes, no, true, false”, which are perfectly
valid but are not handled by the current code. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Second, we can’t parse multiple options&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(describe:tags=yes,abbrev=14)&quot;&lt;/span&gt; refs/tags/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will give an error saying that the boolean arg for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt; is not proper
or something similar for anything which is used in place of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt;. We
can overcome this by properly parsing the options, probably something
similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Third is the clarity of the data structure we use as the basis of the
describe atom&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_BARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_TAGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_ABBREV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_EXCLUDE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagbool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One can’t really tell where we are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagbool&lt;/code&gt; (a very bad variable
name), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern&lt;/code&gt; exactly w.r.t. its corresponding option.
Also, for obvious reasons, this struct doesn’t really work for multiple
options we are discussed above. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from these, Junio also suggested that we document this atom in a
different way which would be more clear and I agree. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-possible-solution&quot;&gt;A possible solution&lt;/h4&gt;

&lt;p&gt;So, coming to fixing this mess, I have some work locally which is similar
to the approach taken in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; (which I haven’t pushed to my fork yet
since for some reason it’s sending SIGSEGV, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt; here I come). We introduce
two new functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_arg_value()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_bool_arg()&lt;/code&gt;,
which are similar to the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_placeholder_arg_value()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_placeholder_bool_arg()&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These functions are used for parsing multiple option arguments given to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty=&lt;/code&gt;, for example in the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailers&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailers&lt;/code&gt; can
take multiple sub-options like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seperator&lt;/code&gt; at a time. That is&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(trailers:key=Helped-By,separator=%x2C )&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where we get all the trailers with “Helped-By”, separated by a comma. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; also makes use of these functions
to parse multiple options so I think making use of them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; would
be great in the sense that future atoms may also of make use of these. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t really discussed this Christian and Hariom yet, regarding the
apporach. I’ll do it once I have pushed things. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-happening-with-the-other-stuff&quot;&gt;What’s happening with the other stuff?&lt;/h4&gt;

&lt;p&gt;I have started working on Hariom’s idea again while waiting for the
review on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom and I am mainly focusing on the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt; function which plays the central role in the whole
thing. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The function basically converts any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; format into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;
format, if there is a map. We can use this directly in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; and
tweak the other functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; to do things accordingly. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t pushed this to my fork yet as the code doesn’t really work
as I intended it to, so I need to make some changes. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Coming to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options, I haven’t worked on them this week but
I should be able to it once v2 of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom goes out. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from these, according to the latest “What’s Cooking” email (Jul 10),
the patch regarding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe:abbrev=&amp;lt;number&amp;gt;&lt;/code&gt; test has been merged to
master and the patches regarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; atom made it into next and
are now on their way to master which is cool. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hoping that v2 of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom is much better. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">Okay. So, as I’ve written last time, I sent the patches to the mailing list, which I thought were perfect. Turns out they weren’t. There are many things wrong with how we implement the describe atom which Junio pointed out in his reply.</summary></entry><entry><title type="html">Week 6: The complete describe atom</title><link href="http://localhost:4000/2023/07/05/week6.html" rel="alternate" type="text/html" title="Week 6: The complete describe atom" /><published>2023-07-05T00:00:00+05:30</published><updated>2023-07-05T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/05/week6</id><content type="html" xml:base="http://localhost:4000/2023/07/05/week6.html">&lt;p&gt;This week has almost only been cleaning up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom code and
making it ready to be a proper patch series that can be sent out to the
mailing list. So no new work has been put into either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; or
Hariom’s idea, which is kind of sad because I have been postponing it
for a while now, especially Hariom’s idea but things should settle in
this week. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;interesting-stuff&quot;&gt;Interesting stuff&lt;/h4&gt;
&lt;p&gt;A couple of interesting things popped up while I was cleaning up the
“describe” atom code. The first one being that a totally unrelated test
was failing on linux-sha256 (CI). The reason this test was failing,
particularly on linux-sha256 was because of the change in the raw:size
of certain objects due to new commits and tags that were added as part
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; tests. This would re-arrange the refs when sorting and
hence the test would fail. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So, I wrote another &lt;a href=&quot;https://github.com/five-sh/git/commit/43cd3eef3cd55b8c78cc619050ae7c98430b7f05&quot;&gt;commit&lt;/a&gt; to fix this. This commit takes the approach of
making all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; related tests run on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe-repo&lt;/code&gt; (a repo
exclusively for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; tests to run), instead of the usual main repo
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t6300-for-each-ref.sh&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I originally thought to squash this commit onto the duplication commit,
but Christian suggested that it deserves an explanation and I agree with
him. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I sent these patches to the mailing list (this fix commit on top of the
duplication commit). They can be read on this &lt;a href=&quot;https://lore.kernel.org/git/20230705175942.21090-1-five231003@gmail.com/&quot;&gt;thread&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another thing I came across was the output of the following command when
run in the trash directory of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t6300&lt;/code&gt; right after the “Verify sorts with
raw:size” test.
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(refname) %(raw:size)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw:size refs/heads/main refs/myblobs/ refs/mytrees/first
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;which gives&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;refs/myblobs/blob8 0
refs/myblobs/first 17
refs/myblobs/blob7 2
refs/myblobs/blob4 3
refs/heads/main 446
refs/myblobs/blob1 5
refs/myblobs/blob2 5
refs/myblobs/blob3 6
refs/myblobs/blob5 6
refs/myblobs/blob6 6
refs/mytrees/first 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;which is strange because the sorting seems to happens while only taking
into account the first digit of raw:size. I don’t know if this is expected
and if it was not, then I would need to dig a little more deeper for this.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;According to the “What’s cooking” email sent on June 30, the change in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(describe:abbrev=...)&lt;/code&gt; test in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t4205-log-pretty-formats.sh&lt;/code&gt; is on its
way to master. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Christian sent out a reply to “What’s cooking” saying that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt;
atom patches where ready to be merged (they had been on “Needs review” for
a while now) since they had seen so many changes and the current version
was looking good. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have also made sure to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(describe:abbrev=...)&lt;/code&gt; test in the
duplication of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; too. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">This week has almost only been cleaning up the describe atom code and making it ready to be a proper patch series that can be sent out to the mailing list. So no new work has been put into either .mailmap or Hariom’s idea, which is kind of sad because I have been postponing it for a while now, especially Hariom’s idea but things should settle in this week.</summary></entry><entry><title type="html">Week 5: Getting familiar with .mailmap</title><link href="http://localhost:4000/2023/06/28/week5.html" rel="alternate" type="text/html" title="Week 5: Getting familiar with .mailmap" /><published>2023-06-28T00:00:00+05:30</published><updated>2023-06-28T00:00:00+05:30</updated><id>http://localhost:4000/2023/06/28/week5</id><content type="html" xml:base="http://localhost:4000/2023/06/28/week5.html">&lt;p&gt;As already mentioned in my last week’s post, I’ve been working on the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom. This week, I worked on improving it and fixing parts
of the tests based on the comments that Christian made on the first
version. The changes can be read on the branch &lt;a href=&quot;https://github.com/five-sh/git/commits/describe2&quot;&gt;“describe2”&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The tests still don’t seem to pass. After spending considerable
amount of time redoing them and trying to understand what was actually
going on, I asked Christian. He took a look at my branch and gave a
really nice explanation as to what was really going on and how we can
possibly fix it. So I think we can fix it now. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also received comments on “t4205-describe-fix” and changed it (just
some minor improvements on the way we do things). The changes can be
read on the branch &lt;a href=&quot;https://github.com/five-sh/git/commits/t4205-describe-fix3&quot;&gt;“t4205-describe-fix3”&lt;/a&gt;. I have also sent this patch
to the &lt;a href=&quot;https://lore.kernel.org/git/20230628181753.10384-1-five231003@gmail.com/&quot;&gt;mailing list&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-mailmap-options&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options&lt;/h4&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; file is a file which has the author and their respective
email information. Git basically looks for this file in the top-level
of the repo by default or if the config variables for the path are set,
then it uses that file. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This file is very useful when the repo consists of various authors and
committers and if any of them have more than one way in which their name
is set or if they have multiple emails. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options are used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; when displaying author names,
author emails, committer names, commiter emails and for reflog identity
name and email. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; doesn’t yet have the reflog options,
the inital attempt would be so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; for
author names and emails and committer names and emails. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To make use of these options in through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;, Christian suggested
to read through the patches that Siddharth Asthana sent regarding the
integration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cat-file&lt;/code&gt;. His work on it can be
read &lt;a href=&quot;https://lore.kernel.org/git/20220630142444.651948-1-siddharthasthana31@gmail.com/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://lore.kernel.org/git/20220916205946.178925-1-siddharthasthana31@gmail.com/&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I’ve spent this week reading through his work on this and thinking about
the possible approach that can be taken.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hariom’s idea is still cooking in my local branch, nothing interesting to
show yet but this will not be the case next week.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">As already mentioned in my last week’s post, I’ve been working on the describe atom. This week, I worked on improving it and fixing parts of the tests based on the comments that Christian made on the first version. The changes can be read on the branch “describe2”.</summary></entry><entry><title type="html">Week 4: The describe atom and friends</title><link href="http://localhost:4000/2023/06/21/week4.html" rel="alternate" type="text/html" title="Week 4: The describe atom and friends" /><published>2023-06-21T00:00:00+05:30</published><updated>2023-06-21T00:00:00+05:30</updated><id>http://localhost:4000/2023/06/21/week4</id><content type="html" xml:base="http://localhost:4000/2023/06/21/week4.html">&lt;p&gt;For the past week (actually, even from a little before that), I’ve been
working on duplicating the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(describe)&lt;/code&gt; and its friends
from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. I haven’t sent them to the mailing list
yet because they need to be cleaned up before that. So it’s still in
a discussion phase between Christian, Hariom and me. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I faced a few challenges initially after the first (and rough)
implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt;. One of them was the code that dealt with
taking a boolean value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe:tags=&amp;lt;bool&amp;gt;&lt;/code&gt;. I initially wrote it
this way &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strtoul_ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagbool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tagbool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagbool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strtoul_ui()&lt;/code&gt; takes a string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arg&lt;/code&gt; as input, given the base to
which we want to convert it to (here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;), will convert the string
number to unsinged int number and put it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagbool&lt;/code&gt;. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;14&quot;&lt;/code&gt;
will give &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;14&lt;/code&gt;. It returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; on success and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt; otherwise. This function
is kind of a wrapper around the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strtoul()&lt;/code&gt; function which does not have
the property of returning errors and it takes negative inputs. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The above code seems to fail tests on CI as it doesn’t work as it is
intended to. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I pushed this work onto my fork (it can be read on branch &lt;a href=&quot;https://github.com/five-sh/git/commits/describe&quot;&gt;“describe”&lt;/a&gt;)
and we had a call that day so I thought we could discuss a bit about it
while also discussing about the transition table that I had made the
week before. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the call, I told Hariom that I was not really happy with the code
dealing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe:tags=&amp;lt;bool&amp;gt;&lt;/code&gt; and that it was failing the tests. He
suggested to use gdb (GNU Debugger) to see what was going wrong. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now, I have a bit of a history with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt;. I tried to learn to use it a long
time ago and it hadn’t really made any sense to me at that time and I
gave up, eventually. So I was kind of hestiant of using it but thought
why not give it another try. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The power of this tool is huge. The time you take to analyze the code
drastically reduces and it just makes making changes to the code so easy.
It can also be used to read code, in the sense that we are always able
to see what are the functions being called and in what files
they are in. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I especially found the post &lt;a href=&quot;https://github.com/edith007/siddharthasthana.dev/blob/main/source/_posts/Using%20GDB%20for%20Debugging%20in%20Git.md&quot;&gt;“Using GDB for Debugging in Git”&lt;/a&gt; by Siddharth
Asthana, to be super helpful. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Coming back to the call, Christian, Hariom and I discussed about the
possible changes to the transition table and also discussed a bit about
supporting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from this, I also wrote a small patch to fix a test in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t4205-log-pretty-formats.sh&lt;/code&gt; as a test regarding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe:abbrev=...&lt;/code&gt;
option was not really doing what it should (it can be read on the branch
&lt;a href=&quot;https://github.com/five-sh/git/commits/t4205-describe-fix&quot;&gt;“t4205-describe-fix”&lt;/a&gt;).
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;work-on-using-ref-filter-in-pretty&quot;&gt;Work on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Unfortunately, I haven’t been able to put that much work onto this
yet after my previous attempt. I really liked the idea of how Hariom
used a function instead to map between the different atoms and the
corresponding placeholders. So I think I’ll be doing something on
similar lines too instead of the stupid approach I took last time.
Maybe refactor some code in it and tweak it to work directly with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;? I don’t know.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">For the past week (actually, even from a little before that), I’ve been working on duplicating the implementation of %(describe) and its friends from pretty to ref-filter. I haven’t sent them to the mailing list yet because they need to be cleaned up before that. So it’s still in a discussion phase between Christian, Hariom and me.</summary></entry><entry><title type="html">Week 3: More logs</title><link href="http://localhost:4000/2023/06/14/week3.html" rel="alternate" type="text/html" title="Week 3: More logs" /><published>2023-06-14T00:00:00+05:30</published><updated>2023-06-14T00:00:00+05:30</updated><id>http://localhost:4000/2023/06/14/week3</id><content type="html" xml:base="http://localhost:4000/2023/06/14/week3.html">&lt;p&gt;This was a tough week and borderline unproductive. I spent the majority
of the first half of the week reading logs, trying to get a good
approach on Hariom’s idea. The whole weekend was just me sitting and
thinking about a way to implement the idea in a maintainable and
efficient manner.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The whole idea is based upon the fact that we should use ref-filter
logic in pretty wherever possible and to do that we need to know if the
atom corresponding to the placeholder exists. My approach to implementing
the idea was using a atom-placeholder map which would have all the atoms
(through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum atom_type&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;) mapped to their corresponding
placeholders. Now, if we want to know if a correspondence exists, we just
need to look up the map and we’ll know (see this &lt;a href=&quot;https://github.com/five-sh/git/commits/ref-filter-in-pretty&quot;&gt;branch&lt;/a&gt;).&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from being a mediocre idea, this has flaws which were not apparent
when I was just thinking about the implementation but not actually
implementing it (writing code). The biggest of them all is that the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum atom_type&lt;/code&gt; and the structs that it is a field of and the functions
that make use of it and the structs are all internal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter.c&lt;/code&gt;
(that is, they are defined as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static&lt;/code&gt;s and cannot be used by other
files).&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholder_atom_map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atom_type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;some placeholder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EQUIVALENT_ATOM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;in_ref_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;format_some_placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;related&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_ref_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholder_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pretty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholder_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So the above code won’t work and it is obvious that to make it work, we
need to change things in ref-filter.c and ref-filter.h and it is exactly
this that makes it a bad approach.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I told Christian and Hariom about this and they suggested that I look at
some of Hariom’s previous work on this (&lt;a href=&quot;https://github.com/harry-hov/git/commit/a07a2ab0d8c39900c098963a0c6f28c5ab359dca&quot;&gt;Hariom’s commit&lt;/a&gt;
about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; printing commits and &lt;a href=&quot;https://github.com/harry-hov/git/commit/47b77e5cf37a1d478d82921a66eddfc611978a03&quot;&gt;commit&lt;/a&gt; about making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic ).&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-happening-on-the-main-side-of-things&quot;&gt;What’s happening on the main side of things?&lt;/h4&gt;
&lt;p&gt;As mentioned in my previous post, the above is essential for testing
purposes only. So on the main side of things, I have been working on a
&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1XKNbp1azKi2IFHzdkQSGS-dgnb98XM128lTXuszHTTA/edit?usp=sharing&quot;&gt;transition table&lt;/a&gt;
between ref-formats and pretty formats. I have also started work on
duplication of other placeholders into atoms and the one I’m
currently working on is    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(describe[:options])&lt;/code&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This format gives a human-readable form of an object.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For a blob, this is given as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;commit-ish&amp;gt;:&amp;lt;path&amp;gt;&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;
describes the first commit in which the blob occurs in a reverse
revision-walk from HEAD.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For a commit, it goes to the most recent tag, suffixes it with the number
of commits on top of it and the abreviated object name of the most recent
commit.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;For a tag, it just plainly shows the most recent tag. By default, it only
shows annotated tags but we can also describe lightweight tags using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--tags&lt;/code&gt;.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time,&lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">This was a tough week and borderline unproductive. I spent the majority of the first half of the week reading logs, trying to get a good approach on Hariom’s idea. The whole weekend was just me sitting and thinking about a way to implement the idea in a maintainable and efficient manner.</summary></entry><entry><title type="html">Week 2: Reading</title><link href="http://localhost:4000/2023/06/07/week2.html" rel="alternate" type="text/html" title="Week 2: Reading" /><published>2023-06-07T00:00:00+05:30</published><updated>2023-06-07T00:00:00+05:30</updated><id>http://localhost:4000/2023/06/07/week2</id><content type="html" xml:base="http://localhost:4000/2023/06/07/week2.html">&lt;p&gt;Last week, I had sent out the patch series duplicating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt;
atom from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. Christian, Junio, Eric and Oswald
left a few comments. One interesting change has been to the way we check
for the version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPG&lt;/code&gt; in the prereq &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPG2&lt;/code&gt;. How I originally wrote
it was&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;gpg_version&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) 2.&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	say &lt;span class=&quot;s2&quot;&gt;&quot;This test requires a GPG version &amp;gt;= v2.0.0&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Now this seems absurd because if we ever see a GPG v3 or v4 or so on, this
won’t work. This can be overcome with&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) 0.&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) 1.&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
which Christian suggested and Eric suggested an improved version&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gpg (GnuPG) &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;01].&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
which makes use of glob patterns and was something that I did not even
think of.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There have also been style changes pointed out by Oswald, which led me
to think a bit more and I came up with the changes where we replace the
use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if-else&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt; when checking for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; options.
This has the advantage of being more readable when compared to the
previous construct.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;All of these changes have been sent out and can be seen on v3. As of the
“What’s cooking in git.git” email sent out by Junio yesterday, these
commits are on “seen”.&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-cooking-in-my-fork&quot;&gt;What’s cooking in my fork?&lt;/h4&gt;

&lt;p&gt;Apart from replying and amending the patch series according to the
reviews, I have been reading through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;.
Hariom came up with the idea of experimenting with a bridge between
both the formats. Something like&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if atom exists for pretty arg:
	use ref-filter format
else
	use pretty format
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
which is great for testing ref-filter formats. So I began tweaking some
code and making changes. Nothing has been pushed yet though. I have also
been reading through log and making sense of things. Parts of code has
changed since Hariom and others worked on the project (which is obvious)
and it has become even more simpler to write good and efficient code and
to build on top of their code. It becomes even more apparent, day after
day, the power that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git blame&lt;/code&gt; hold.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from this, I’m thinking about working on other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; formats
which can be re-implemented in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. Specifically those which
make the most sense in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. This should be fun.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time,&lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">Last week, I had sent out the patch series duplicating the signature atom from pretty into ref-filter. Christian, Junio, Eric and Oswald left a few comments. One interesting change has been to the way we check for the version of GPG in the prereq GPG2. How I originally wrote it was</summary></entry><entry><title type="html">Week 1: The First Patches</title><link href="http://localhost:4000/2023/05/31/week1.html" rel="alternate" type="text/html" title="Week 1: The First Patches" /><published>2023-05-31T00:00:00+05:30</published><updated>2023-05-31T00:00:00+05:30</updated><id>http://localhost:4000/2023/05/31/week1</id><content type="html" xml:base="http://localhost:4000/2023/05/31/week1.html">&lt;p&gt;A lot of things happened this week and I don’t really know where to
begin. So I’ll start with the work I did and touch the other details
as I go through them. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in the post the post before this, I am continuing the work
that Nsengiyumva has done before me and am builiding on his work
regarding the signature format. Git already has a way to output
signatures and the information related to it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;, but
the goal here is to duplicate this format in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; so that
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; can do everything that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; is already doing. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My progress can be found from branches “&lt;a href=&quot;https://github.com/five-sh/git/commits/sign1&quot;&gt;sign1&lt;/a&gt;” to “&lt;a href=&quot;https://github.com/five-sh/git/commits/sign5&quot;&gt;sign5&lt;/a&gt;”. This
process of working on this has been very informative as I was tweaking
through old log messages, particularly of &lt;a href=&quot;https://github.com/git/git&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gpg-interface.{c, h}&lt;/code&gt;&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The problem with Nsengiyumva’s patches was that they were breaking CI,
specifically on linux32. So if we figure out a way to make these tests
pass, we can propose a successful change and hopefully get the patches
that Nsegiyumva has worked on, merged since it is a step towards reaching
that single interface for formats. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-is-breaking-ci&quot;&gt;What is breaking CI?&lt;/h4&gt;

&lt;p&gt;GNU Privacy Guard, that is GPG, is basically a crytographic tool that
helps make your files secure (this is really vague but see their
&lt;a href=&quot;https://gnupg.org/&quot;&gt;website&lt;/a&gt;). In Git, you can sign commits or tags with the help of GPG,
so that when you push it, people can verify and know that your change
was legitimate and has not been touched. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In this process, Git (in fact, GPG) allows you see what is going on
behind the curtain. Since what Nsengiyumva has worked on and what I am
now working on has to do with how we can customize this output to the way
we want to see it on stdout (see &lt;a href=&quot;https://git-scm.com/docs/git-log#_pretty_formats&quot;&gt;log&lt;/a&gt;), it is necessary we write tests to make
sure the output is indeed customized. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is exactly where the CI breaks. You see, there is a difference in the
way GPG outputs on stderr between different major GPG versions. Since
linux32 (on which the CI jobs also run on) only supports GPG till v1.4.2,
the test written for the format option where the whole verification
message is shown fails on linux32 but passes on all other systems for
which we run the CI jobs because all of these use GPG v2.0.0 or higher. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I refactored the test to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; script in hope of getting the test
to pass but it was in vain. So I started searching the logs.&lt;/p&gt;

&lt;h4 id=&quot;mentors&quot;&gt;Mentors&lt;/h4&gt;

&lt;p&gt;I was going through the log messages looking for something useful which
would help make this test pass on all systems. I found some commits
which were related but not really useful in this context. So I texted
Christian and Hariom saying this was the case. Since we had already
decided that we will be meeting online every Friday and it was Friday,
we discussed about this in the meet. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The meet was a great experience for me. It was the first time I talked
with my mentors and it was really exciting. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Christian suggested in the meet that we should introduce a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prereq
GPG2&lt;/code&gt;, which would exclusively use GPG v2.0.0 or higher and will exit if
it is any other version. We agreed to go with it.&lt;/p&gt;

&lt;p&gt;It was instantly clear to me the role that mentors played in a project.&lt;/p&gt;

&lt;h4 id=&quot;current-work&quot;&gt;Current Work&lt;/h4&gt;

&lt;p&gt;Along with the new prereq, I also cleaned up the code around the tests. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;While going through the code related to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; formats, I noticed
there was no test for the raw verification message format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%GG&lt;/code&gt; but didn’t
really give it much thought. After Christian looked at the final commits,
he thought it would be better to add such a test and I couldn’t agree more
so we added it.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This version can be found on branch “&lt;a href=&quot;https://github.com/five-sh/git/commits/sign5&quot;&gt;sign5&lt;/a&gt;” for which the CI is successful. This is also the version
that I sent to the mailing list and these are the first &lt;a href=&quot;https://lore.kernel.org/git/20230529192209.17747-1-five231003@gmail.com/&quot;&gt;patches&lt;/a&gt; that I 
sent to the mailing list as part of GSoC.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Also, for anyone trying to set up Mutt, if you have a GMail account or
really anything that requires a compulsory OAuth2 authentication, believe me,
you are in for real pain. There is a Red Hat post to help you with this
process but I didn’t find it &lt;em&gt;that&lt;/em&gt; helpful. You’ll be much better off
reading the README associated with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutt_oauth2.py&lt;/code&gt; script instead. This
is the script which is facilitates the use of OAuth2 in Mutt.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">A lot of things happened this week and I don’t really know where to begin. So I’ll start with the work I did and touch the other details as I go through them.</summary></entry><entry><title type="html">Warming up for GSoC’23</title><link href="http://localhost:4000/2023/05/17/warming-up-for-gsoc.html" rel="alternate" type="text/html" title="Warming up for GSoC’23" /><published>2023-05-17T00:00:00+05:30</published><updated>2023-05-17T00:00:00+05:30</updated><id>http://localhost:4000/2023/05/17/warming-up-for-gsoc</id><content type="html" xml:base="http://localhost:4000/2023/05/17/warming-up-for-gsoc.html">&lt;p&gt;I have been accepted for GSoC’23 as a contributor! I will be contributing
to Git and the project I will be working on is&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt; Unify ref-filter formats with other –pretty formats &lt;/strong&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My proposal can be read at &lt;a href=&quot;https://docs.google.com/document/d/1JBznA5n0WdWsbEskCeXxOnQuaa0urD89VtprxstLPzo/edit?usp=sharing&quot;&gt;GSoC-Proposal&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The Git Community has been very supportive and I have learnt so much
in the time I spent with them before GSoC. Hoping that I will
continue to learn while working on this project and bond more
with the community.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;My mentors are
&lt;br /&gt;
	Christian Couder &amp;lt;christian.couder@gmail.com&amp;gt; &lt;br /&gt;
	Hariom Verma &amp;lt;hariom18599@gmail.com&amp;gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The main code repo, where I’ll be working at is &lt;a href=&quot;https://github.com/five-sh/git&quot;&gt;repo&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-now&quot;&gt;What Now?&lt;/h4&gt;
&lt;p&gt;I am currently working on the duplication of the logic, in pretty, in
ref-filter. Especially on the patches that Nsengiyumva Wilberforce sent
regarding the duplication of logic that formats commit and tag signatures.
Nsengiyumva’s patches can be read on the &lt;a href=&quot;https://lore.kernel.org/git/20230311210607.64927-1-nsengiyumvawilberforce@gmail.com/&quot;&gt;mailing list&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These patches seem to breaking CI, so I am working on them (see &lt;a href=&quot;https://github.com/five-sh/git/commits/sign1&quot;&gt;branch&lt;/a&gt;)
as they are really helpful in accomplishing the goal of this project.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The code for the files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter.{c, h}&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty.{c, h}&lt;/code&gt; can be read
at the &lt;a href=&quot;https://github.com/git/git&quot;&gt;git repo&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I will be updating this blog weekly on Wednesdays, tracking my progress
in that week.&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">I have been accepted for GSoC’23 as a contributor! I will be contributing to Git and the project I will be working on is</summary></entry></feed>