<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-31T12:38:17+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">five-sh’s website</title><subtitle></subtitle><entry><title type="html">GSoC’23 it’s a wrap</title><link href="http://localhost:4000/2023/08/26/GSoC-it-is-a-wrap.html" rel="alternate" type="text/html" title="GSoC’23 it’s a wrap" /><published>2023-08-26T00:00:00+05:30</published><updated>2023-08-26T00:00:00+05:30</updated><id>http://localhost:4000/2023/08/26/GSoC-it-is-a-wrap</id><content type="html" xml:base="http://localhost:4000/2023/08/26/GSoC-it-is-a-wrap.html">&lt;p&gt;It’s the last week of GSoC’23. What a beautiful ride it has been. I have learnt
so much in these past 12 weeks. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In this last week, I wanted to wrap up my work on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; wherever possible and I think it took a bit too long. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The way this is done is the same as I wrote it out in the last post. The commits
are on the branch “&lt;a href=&quot;https://github.com/five-sh/git/commits/use-ref-filter-in-pretty0&quot;&gt;use-ref-filter-in-pretty0&lt;/a&gt;”. They seem to be failing some
tests because some options, for example for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt;, don’t really work like
they are expected to and since whenever we encounter a known &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;
format, we jump into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic, some options are being over-ridden
because of this, although it should be mentioned that the grabbing of the values
for the formats is done by successively switching between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-fitler&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. So I think the functions need to be called more carefully, in
such a way that we fall back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;’s way of doing things.&lt;/p&gt;

&lt;p&gt;I also made an attempt to review a patch that concentrated on a test regarding
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; atom. Although it seems that I misunderstood the patch a bit and
the author was kind enough to explain to me in more detail what the patch was
really aimed at and after a bit of discussion, the author sent out two patches
as another way of doing this which was really clean. The discussion can be read
at this &lt;a href=&quot;https://lore.kernel.org/git/20230821222448.1524a5fc@leda.eworm.net/T/&quot;&gt;thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have summed up all my work and brought it together in &lt;a href=&quot;https://five-sh.github.io/2023/08/26/the-final-report&quot;&gt;the final report&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Thanks Christian and Hariom for mentoring me and teaching me a lot of things in
these past weeks. I have learnt so much and believe that my code taste has
improved a lot compared to when I took my first steps towards contributing to
Git. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have decided that I will continue to contribute to Git even after GSoC and
there are things in the code which I would like to work on. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s the last week of GSoC’23. What a beautiful ride it has been. I have learnt so much in these past 12 weeks.</summary></entry><entry><title type="html">The Final Report</title><link href="http://localhost:4000/2023/08/26/the-final-report.html" rel="alternate" type="text/html" title="The Final Report" /><published>2023-08-26T00:00:00+05:30</published><updated>2023-08-26T00:00:00+05:30</updated><id>http://localhost:4000/2023/08/26/the-final-report</id><content type="html" xml:base="http://localhost:4000/2023/08/26/the-final-report.html">&lt;p&gt;Hi, &lt;br /&gt;
GSoC’23 is almost over and it is time for me to bring everything that I did in
the past 12 Weeks to a single place, including my work and the things that I
learnt and the relationship I have built with my mentors and the Git Community.&lt;/p&gt;

&lt;h3 id=&quot;pre-gsoc&quot;&gt;Pre GSoC&lt;/h3&gt;

&lt;p&gt;My interest was piqued in Git back when I learnt what open source really was,
about a year ago. Since then I have been reading its code to get a feel of
it as it was something very different to the programming that I had been in
College or till that point of time. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I still remember how I was lurking in the background of the mailing list every
day, seeing how things were done and was reading the code of Git’s initial
commit, alongside, to see how they were translated into today’s commands. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These are the patches that I submitted to the mailing list before GSoC:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://lore.kernel.org/git/20221110160556.29557-1-five231003@gmail.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[PATCH] repository-version.txt: partialClone casing change&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lore.kernel.org/git/20221116163956.1039137-1-five231003@gmail.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[RFC][PATCH] object.c: use has_object() instead of repo_has_object_file()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lore.kernel.org/git/20230202165137.118741-1-five231003@gmail.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[PATCH] merge: use reverse_commit_list() for list reversal&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lore.kernel.org/git/20230207150359.177641-1-five231003@gmail.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[PATCH] commit: warn the usage of reverse_commit_list() helper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://lore.kernel.org/git/20230317175601.4250-1-five231003@gmail.com/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[PATCH v4] index-pack: remove fetch_if_missing=0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A more detailed description about them can be read in my &lt;a href=&quot;https://docs.google.com/document/d/1JBznA5n0WdWsbEskCeXxOnQuaa0urD89VtprxstLPzo/edit?usp=sharing&quot;&gt;GSoC Proposal&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;project&quot;&gt;Project&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Title:&lt;/strong&gt; Unify &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; formats with other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty&lt;/code&gt; formats &lt;br /&gt;
&lt;strong&gt;Mentors:&lt;/strong&gt; Christian Couder, Hariom Verma &lt;br /&gt;
&lt;strong&gt;Aim:&lt;/strong&gt; &lt;br /&gt;
To unify both the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; interfaces such that only a single
interface is used to handle the formatting of git’s subcommands. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;As this is a continuation of the work done by other contributors, GSoC students
and Outreachy interns, my main goal in this project is to follow their path and
re-implement the remaining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; placeholders into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; formats.&lt;/p&gt;

&lt;h3 id=&quot;work&quot;&gt;Work&lt;/h3&gt;

&lt;p&gt;Many of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; placeholders have already been implemented in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;.
The ones that were remaining were the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; related formats, the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; formats, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; options and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflog&lt;/code&gt; options. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;A more detailed mapping can be seen in this &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1XKNbp1azKi2IFHzdkQSGS-dgnb98XM128lTXuszHTTA/edit?usp=sharing&quot;&gt;transition table&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-signature-atom&quot;&gt;The signature atom&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; format and its friends give the commit and tag signature
information&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;signature			- GPG signautre
signature:grade			- validity of the signature &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;good, bad, etc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
signature:signer		- signer of the GPG signature
signature:key			- key of the GPG signature
signature:fingerprint		- fingerprint fo the GPG signature
signature:primarykeyfingerprint - primary key fingerprint of the GPG signature
signature:trustlevel		- trust Level of the GPG Signature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The duplication of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; was something that was already worked on before
me. Almost all the work was done but one test was breaking CI, so I worked on
that and did some refactoring and sent the patches to the mailing list, which
have now been merged to master.&lt;/p&gt;

&lt;h4 id=&quot;the-describe-atom&quot;&gt;The describe atom&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom and friends give the human readable form of a committish
by internally running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git-describe&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;describe			- the raw output from git-describe on the given ref
describe:tags&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;bool-value&amp;gt;	- along with annotated tags, consider light-weight tags as well &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set
&lt;/span&gt;describe:abbrev&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;number&amp;gt;	- use at least &amp;lt;number&amp;gt; digits to generate the human readable format
describe:match&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;pattern&amp;gt;	- consider tags only that match the glob pattern
describe:exclude&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;pattern&amp;gt;	- exclude all tags that match the glob pattern
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These options can also be used together, where ever appropriate. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The commits for this are also in master now. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-mailmap-options&quot;&gt;The mailmap options&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; options are the usual name and email formats but respecting the
mailmap file at the top of a repository or according to relevant configuration
variable set.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;authorname:mailmap			- author name respecting mailmap
committername:mailmap			- committer name respecting mailmap
taggername:mailmap			- tagger name respecting mailmap

authoremail:mailmap			- author email respecting mailmap
authoremail:mailmap,trim		- author email without the angle brackets, respecting mailmap
authoremail:mailmap,localpart		- author email with only what occurs before &lt;span class=&quot;s1&quot;&gt;&apos;@&apos;&lt;/span&gt;, respecting mailmap
committeremail:mailmap			- committer email respecting mailmap
committeremail:mailmap,trim		- committer email without the angle brackets, respecting mailmap
committeremail:mailmap,localpart	- committer email with only what occurs before &lt;span class=&quot;s1&quot;&gt;&apos;@&apos;&lt;/span&gt;, respecting mailmap
taggeremail:mailmap			- tagger email respecting mailmap
taggeremail:mailmap,trim		- tagger email without the angle brackets, respecting mailmap
taggeremail:mailmap,localpart		- tagger email with only what occurs before &lt;span class=&quot;s1&quot;&gt;&apos;@&apos;&lt;/span&gt;, respecting mailmap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These formats are currently cooking in my fork and can be read on the branch
“&lt;a href=&quot;https://github.com/five-sh/git/commits/mailmap7&quot;&gt;mailmap7&lt;/a&gt;” which has the latest version of the commits associated with the
implementation of these formats. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;misc&quot;&gt;Misc&lt;/h4&gt;

&lt;p&gt;Apart from these, I also worked on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic wherever possible
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. The way this is done is that if a mapping exists between
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; formats and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; formats, we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic. Otherwise,
we use the usual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; logic. This is still cooking in my branch and is not
generally meant to be sent to the mailing list but can be used to check the
compatibility of any newly added formats. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also worked on a small patch which was a test fix in regards to how
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe:abbrev=&amp;lt;number&amp;gt;&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; format’s test did not test all the possible
cases. This patch has been merged to master. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also made an attempt to review a patch that was sent to change a test that was
written as part of the original &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; commits. While the review didn’t go
as expected from my side (I misunderstood some meaning of the the patch), the
final patches looked very clean. This is the &lt;a href=&quot;https://lore.kernel.org/git/20230821222448.1524a5fc@leda.eworm.net/T/&quot;&gt;mailing list thread&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have also maintained a &lt;a href=&quot;https://five-sh.github.io/blog&quot;&gt;blog&lt;/a&gt; during this period and have posted weekly about
the work I did in the week and also some other things. I hope to continue this
blog and post here whenever I find something to write about in Git that
fasicnated me or just anything tech-related in general.&lt;/p&gt;

&lt;h3 id=&quot;patches&quot;&gt;Patches&lt;/h3&gt;

&lt;h4 id=&quot;the-signature-atom-1&quot;&gt;The signature atom&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Graduated to &apos;master&apos;]

* ks/ref-filter-signature (2023-06-06) 2 commits
  (merged to &apos;next&apos; on 2023-07-06 at 1748d2bb93)
 + ref-filter: add new &quot;signature&quot; atom
 + t/lib-gpg: introduce new prereq GPG2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Merged to master &lt;br /&gt;
&lt;strong&gt;Mailing List&lt;/strong&gt;: &lt;a href=&quot;https://lore.kernel.org/git/20230602023105.17979-3-five231003@gmail.com/T/&quot;&gt;Thread&lt;/a&gt; &lt;br /&gt;
&lt;strong&gt;Merge Commit&lt;/strong&gt;: &lt;a href=&quot;https://github.com/git/git/commit/81ebc54e81619ccc71fca6a4ce7822e78b24e80c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks/ref-filter-signature&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-describe-atom-1&quot;&gt;The describe atom&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Graduated to &apos;master&apos;]

* ks/ref-filter-describe (2023-07-24) 2 commits
  (merged to &apos;next&apos; on 2023-07-26 at f4b3b3b7ef)
 + ref-filter: add new &quot;describe&quot; atom
 + ref-filter: add multiple-option parsing functions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Merged to master &lt;br /&gt;
&lt;strong&gt;Mailing List&lt;/strong&gt;: &lt;a href=&quot;https://lore.kernel.org/git/20230725205924.40585-3-five231003@gmail.com/T/&quot;&gt;Thread&lt;/a&gt; &lt;br /&gt;
&lt;strong&gt;Merge Commit&lt;/strong&gt;: &lt;a href=&quot;https://github.com/git/git/commit/70e5c5ddddadc7f15f64f812ae511eab83ca0040&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks/ref-filter-describe&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-mailmap-options-1&quot;&gt;The mailmap options&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ref-filter: add mailmap support
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Cooking in fork and passing tests &lt;br /&gt;
&lt;strong&gt;Fork&lt;/strong&gt;: &lt;a href=&quot;https://github.com/five-sh/git/commits/mailmap7&quot;&gt;mailmap7&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;use-ref-filter-logic-in-pretty&quot;&gt;Use ref-filter logic in pretty&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pretty: use ref-filter logic wherever possible
pretty: introduce ref_format_commit()
ref-filter: introduce get_value_from_oid()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Cooking in fork and failing tests &lt;br /&gt;
&lt;strong&gt;Reasons for failing tests&lt;/strong&gt;: &lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Around 10% of t4205, 30% of t4212 and 15% of t6006 seem to be failing tests.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--date&lt;/code&gt; option of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; is not given higher priority when compared to the
format string and this seems to be the main reason why the tests are failing.&lt;/li&gt;
  &lt;li&gt;Some other tests are failing because of utf-8 formatting.&lt;/li&gt;
  &lt;li&gt;The tests failures can be read in the &lt;a href=&quot;https://github.com/five-sh/git/actions/runs/5964643036&quot;&gt;logs of ci&lt;/a&gt; for this branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Fork&lt;/strong&gt;: &lt;a href=&quot;https://github.com/five-sh/git/commits/use-ref-filter-in-pretty0&quot;&gt;use-ref-filter-in-pretty0&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;test-fix-describe-with-abbrev&quot;&gt;Test fix, describe with abbrev&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Graduated to &apos;master&apos;]

* ks/t4205-test-describe-with-abbrev-fix (2023-06-29) 1 commit
  (merged to &apos;next&apos; on 2023-06-29 at 5fc309dc75)
 + t4205: correctly test %(describe:abbrev=...)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: Merged to master &lt;br /&gt;
&lt;strong&gt;Mailing List&lt;/strong&gt;: &lt;a href=&quot;https://lore.kernel.org/git/20230629133841.18784-2-five231003@gmail.com/T/&quot;&gt;Thread&lt;/a&gt; &lt;br /&gt;
&lt;strong&gt;Merge Commit&lt;/strong&gt;: &lt;a href=&quot;https://github.com/git/git/commit/d52a45cf5635f9f40a99ddc6efa92713f2d357b4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ks/t4205-test-describe-with-abbrev-fix&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;future-work&quot;&gt;Future Work&lt;/h3&gt;

&lt;h4 id=&quot;the-reflog-formats&quot;&gt;The reflog formats&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflog&lt;/code&gt; formats do not yet have an implementation in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; and
an immediate thing to work on would be that. Of course, I’d like to come back to
it after sending the implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; options to the mailing list and
making the work “use-ref-filter-in-pretty0” branch a bit more stable as it is
still failing tests. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;refactor-multiple-option-parsing-functions&quot;&gt;Refactor multiple option parsing functions&lt;/h4&gt;

&lt;p&gt;Another thing that one can work on is refactoring the multiple option parsing
functions that were introduced as part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; formats patches. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;There is a possibility that one could change the already existing functions in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; for multiple option parsing, which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_placeholder_arg_value()&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_placeholder_bool_arg()&lt;/code&gt;, so that they can directly be used in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_arg_value()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_bool_arg().&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;closing-remarks&quot;&gt;Closing Remarks&lt;/h3&gt;

&lt;p&gt;This has been such a ride. I’m lucky to have such wonderful mentors,
Christian and Hariom, accept my proposal. They have guided me throughout this
project and have taught me so many things. They gave insightful reviews which
helped me improve my code quality and we often met through online meetings via
Google Meet, where they answered any questions that I had. I can’t thank them
enough. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also want to thank the Git Community, which has been very supportive before
and during GSoC. From tolerating my sloppy patches to giving me very nice
explanations. Thanks Junio, Taylor, Peff, Elijah, Ævar, Jonathan, Oswald, Eric,
Glen and Calvin. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I hope to continue in this community and keep learning things from them. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">Hi, GSoC’23 is almost over and it is time for me to bring everything that I did in the past 12 Weeks to a single place, including my work and the things that I learnt and the relationship I have built with my mentors and the Git Community.</summary></entry><entry><title type="html">Week 12: How ref-filter does things</title><link href="http://localhost:4000/2023/08/16/week12.html" rel="alternate" type="text/html" title="Week 12: How ref-filter does things" /><published>2023-08-16T00:00:00+05:30</published><updated>2023-08-16T00:00:00+05:30</updated><id>http://localhost:4000/2023/08/16/week12</id><content type="html" xml:base="http://localhost:4000/2023/08/16/week12.html">&lt;p&gt;The past week, I have been rerolling the mailmap commit in my fork according to
comments it recieved. I think it has taken more form now and we can send it to
the mailing list soon. Although I guess the patch cycle will go well after
Git-2.42.0 (which is in less than a &lt;a href=&quot;http://tinyurl.com/gitcal&quot;&gt;week&lt;/a&gt; from now, so). The lastest of the
rerolls in the fork is “&lt;a href=&quot;https://github.com/five-sh/git/commits/mailmap4&quot;&gt;mailmap4&lt;/a&gt;”. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The majority of the work that I did this week was on Hariom’s idea.&lt;/p&gt;

&lt;h4 id=&quot;setting-the-stage&quot;&gt;Setting the stage&lt;/h4&gt;

&lt;p&gt;So, all the way back in the “Week 2” post, I wrote about an idea that Hariom
came up with regarding a bridge between the ref-filter formats and the pretty
formats, where we essentially do something like&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;grab&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pretty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;way&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this helps in testing, say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; output, which is generated from the logic of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;my-approach-kind-of&quot;&gt;My approach (kind of)&lt;/h4&gt;

&lt;p&gt;The way &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; does things out of any filtering of refs is that, it first
gathers the format in&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;format&amp;gt; refspec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and verifies that format, which parses the options if we have a legitimate
format and then we grab the values according our format.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; also works in a similar way but is more straight-forward, there are
calls to the core &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format_commit_one()&lt;/code&gt; which strips off the placeholder string
till all the placeholders are parsed. The values themselves are also grabbed in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format_commit_one()&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hariom did work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty-lib.{c, h}&lt;/code&gt;, which prints out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; based on the
values grabbed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. One of the functions used in the
implementation is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt;, which converts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; formats to
their equivalent &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; formats. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The implementation that I’m working on now makes use of this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt;
function, but instead of returning the length of the placeholder, it returns the
format string as known to ref-filter. We run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;verify_ref_format()&lt;/code&gt; on such a
string and grab the values from ref-filter. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To make this work, we would need to find a way in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; where we could
grab values for a given format without a ref but with the commit id, which I’m
currently working on. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we run a check whether the whole &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; format string is
transformable into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; format string. If not, we fall back to doing
things pretty way and finally print the values for example a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; output. We
can do this two ways&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reject &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic if at least one &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; format doesn’t have an
equivalent in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; for the given format string.&lt;/li&gt;
  &lt;li&gt;Reject &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic for only those &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; placeholders in the format
string that don’t have an equivalent in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; and grab values
accordingly, that is, for those that have an equivalent in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; grab
values through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; logic and for those who don’t, fallback to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;
way of doing things.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first way is relatively easier but the second way can be followed given how
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt; is written. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t discussed this with Christian and Hariom yet, wanted to do it once the
I pushed the commits. Throughout the week, we discussed the mailmap support to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">The past week, I have been rerolling the mailmap commit in my fork according to comments it recieved. I think it has taken more form now and we can send it to the mailing list soon. Although I guess the patch cycle will go well after Git-2.42.0 (which is in less than a week from now, so). The lastest of the rerolls in the fork is “mailmap4”.</summary></entry><entry><title type="html">Week 11: Another possible approach at mailmap options</title><link href="http://localhost:4000/2023/08/09/week11.html" rel="alternate" type="text/html" title="Week 11: Another possible approach at mailmap options" /><published>2023-08-09T00:00:00+05:30</published><updated>2023-08-09T00:00:00+05:30</updated><id>http://localhost:4000/2023/08/09/week11</id><content type="html" xml:base="http://localhost:4000/2023/08/09/week11.html">&lt;p&gt;This week was a bit unproductive as I was sick for a few days and couldn’t
really get any work done in that time. I was able to add the docs and the tests
to the changed implementation from Christian’s comments last week though. So now
the implementation looks a bit like this &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;EO_RAW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;EO_TRIM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;EO_LOCALPART&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;EO_MAILMAP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We parse the options of the given relevant format with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email_atom_option_parser()&lt;/code&gt; and loop through it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;person_email_atom_parser()&lt;/code&gt;
to store them in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct used_atom&lt;/code&gt; (the looping is done atmost two times, with
the only option we can comibine &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trim&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localpart&lt;/code&gt; is with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt;). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We then perform bit operations to get the asked values which are stored in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct used_atom&lt;/code&gt;. This part is done in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_email()&lt;/code&gt; which is then called by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grab_person()&lt;/code&gt; to get the values according to the option parsing. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;another-approach&quot;&gt;Another approach&lt;/h4&gt;

&lt;p&gt;In the above way of implementing things, we transform the buffer passed to get
the email value, according to the options, to conform with .mailmap file or the
config variable set. However, we do this transforming step precisely thrice.
Once in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_line()&lt;/code&gt;, whenever we pass something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(author)&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--format=&amp;lt;format&amp;gt;&lt;/code&gt;. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_name()&lt;/code&gt;, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authorname:mailmap)&lt;/code&gt; and related
formats. In &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_email()&lt;/code&gt;, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authoremail:mailmap)&lt;/code&gt; and related formats and
their respective options. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We can avoid doing this by directly changing the buffer we pass to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_wholine()&lt;/code&gt; by doing something like&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mailmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;change_to_mailmap_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grab_person()&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We could also change this in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_wholine()&lt;/code&gt; itself. This is faster because we
only grab a buffer till the wholines (that is author, committer and tagger
information) and then apply mailmap to the particular headers. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Parsing the options remains the same, we only change the above mentioned code so
that we don’t have to individually call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change_to_mailmap_value()&lt;/code&gt; in
value-grabbing functions. This is still in its testing phase and is just an idea
and I don’t know if it’ll work (I did test it maunally though and it seems to
have some bugs, usually of memory allocation). I still have to discuss this with
Christian and Hariom. I thought I’ll do that with the code all written. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is all the work that I did past week and nothing else. I have pushed none
of it (not even the work with Christian’s comments) because there seems to be a
bug with memory allocation in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_email()&lt;/code&gt;. I guess this is because some
conditions are not being tests and the variables start accessing or duplicating
bogus memory. I’ll have to figure it out. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">This week was a bit unproductive as I was sick for a few days and couldn’t really get any work done in that time. I was able to add the docs and the tests to the changed implementation from Christian’s comments last week though. So now the implementation looks a bit like this</summary></entry><entry><title type="html">Week 10: Code can be cleaner</title><link href="http://localhost:4000/2023/08/02/week10.html" rel="alternate" type="text/html" title="Week 10: Code can be cleaner" /><published>2023-08-02T00:00:00+05:30</published><updated>2023-08-02T00:00:00+05:30</updated><id>http://localhost:4000/2023/08/02/week10</id><content type="html" xml:base="http://localhost:4000/2023/08/02/week10.html">&lt;p&gt;The mailmap options have finally taken form and I have pushed the initial
version to my fork with the branch name “&lt;a href=&quot;https://github.com/five-sh/git/commits/mailmap0&quot;&gt;mailmap0&lt;/a&gt;”. The approach used is as
described in my previous post with some additional changes so that we now can
also grab mailmap values for the name atoms (that is, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authorname)&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(committername)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(taggername)&lt;/code&gt;). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The function that does this grabbing is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change_to_mailmap_value()&lt;/code&gt;, which reads
the mailmap and if an entry exists, grabs it and changes our buffer accordingly,
giving us the mailmap version of the email or name or both. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The additional changes that I mention above are to the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_wholine()&lt;/code&gt;. What this function does is that it finds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;author&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;committer&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagger&lt;/code&gt; lines (if they exist) and strips off the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who&lt;/code&gt;
part of the first such occurrence and returns the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refs/foo/bar&lt;/code&gt; buffer.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The changes were made so that we now return the whole buffer, because we need
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who&lt;/code&gt; part of this buffer for mailmap purposes (code in mailmap wants this
info). The subsequent code was also changed so that we do actually skip the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who&lt;/code&gt;
part where ever needed.&lt;/p&gt;

&lt;p&gt;Christian took a look at the commits and left a few comments which were really
helpful and which I agree should definitely go into the changed version of these
commits. Those changes are&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Instead of always returning the whole buffer from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_wholine()&lt;/code&gt;, we should
rather add a flag so that we can control the skipping of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;who&lt;/code&gt; part.&lt;/li&gt;
  &lt;li&gt;When handling the options of the email, we normally use an enum which has all
the possible options with 0 to final_option - 1 indexing. Instead of this, we
should rather use bit fields, which has a number of advantages and makes the
code a lot cleaner and easy to err wherever we want (more info at this
&lt;a href=&quot;https://github.com/five-sh/git/commit/ee38de44399fb90140f46c88d4ccef206400b498#r123438198&quot;&gt;comment&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The current code only handles options in a specific order and errs if they
are not in that order. For example,&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(authoremail:mailmap,trim)&quot;&lt;/span&gt; refs/heads/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;is fine, but&lt;/p&gt;

    &lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(authoremail:trim,mailmap)&quot;&lt;/span&gt; refs/heads/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;errs. So the implementation needs to change a bit so that this is allowed
too. Anyone using this option obviously expects this also to work.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were also some other minor comments about refactoring things for more
cleanness. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;apart-from-the-mailmap-options&quot;&gt;Apart from the mailmap options&lt;/h4&gt;

&lt;p&gt;For the last many posts, I have been saying that I am making progress on
Hariom’s idea but I haven’t pushed anything because most of it gets stashed
and then dropped. This especially happened in the last week because I shifted my
focus a bit from mailmap and worked on this.&lt;/p&gt;

&lt;p&gt;Every time I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt; for some seg fault or some other error where the output
for the code that I wrote is not what I expected, I learn something new about
the command and how it calls the different functions and what serves as a pipe
to what. This kind of changes things in the code that I already wrote and I’ve
slowly began to realize that the code I wrote was wrong for many reasons and
the reason mostly being that one should also keep in mind how the command runs
and jumps from function to function TOP to BOTTOM and not BOTTOM to TOP. BOTTOM
to TOP was the only view I had till now and this lead to writing code that would
unnecessarily call private functions and when you compile such a thing, you
obviously get an error and you try to somehow make the functions public but what
you should be thinking about is how you should make use of the public functions
so that they automatically handle the private functions themselves and give you
what you need. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This seems kind of obvious now but I somehow didn’t realize it all this
while. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">The mailmap options have finally taken form and I have pushed the initial version to my fork with the branch name “mailmap0”. The approach used is as described in my previous post with some additional changes so that we now can also grab mailmap values for the name atoms (that is, %(authorname), %(committername) and %(taggername)).</summary></entry><entry><title type="html">Week 9: Implementing the .mailmap options</title><link href="http://localhost:4000/2023/07/26/week9.html" rel="alternate" type="text/html" title="Week 9: Implementing the .mailmap options" /><published>2023-07-26T00:00:00+05:30</published><updated>2023-07-26T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/26/week9</id><content type="html" xml:base="http://localhost:4000/2023/07/26/week9.html">&lt;p&gt;I’ve started actually implementing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; options into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;.
Christian, Hariom and I have decided that we will go with options spelled
out as, for example, &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(authoremail:mailmap,trim)&quot;&lt;/span&gt; refs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so that we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; by specifying “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt;” in the options of the
atom. Currently the goal is to only apply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; to the atoms
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorname, authoremail&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;committername, committeremail&lt;/code&gt; and leave
out the trailers (for now). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I started out with making &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--format=&quot;%(authoremail:mailmap)&quot;&lt;/code&gt; and its
friends work. The approach taken is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_email()&lt;/code&gt; grabs the email values of a given commit
or tag buffer and modifies them according to the options given to the
atom.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; support, that is, to grab these values from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt;
instead, we need to modify this buffer so that the buffer shows the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; equivalents.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We do this by checking if we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; arg in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;person_email_atom_parser()&lt;/code&gt; and if we have one, we modify the given
buffer by calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_mailmap_to_header()&lt;/code&gt; on it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This buffer is then modified according to the options given, that is
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nothing&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trim&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localpart&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A similar approach can also be taken to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; for the name
of an author or committer (in which case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_name()&lt;/code&gt; has to be changed).
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t pushed the changes I made to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mailmap&lt;/code&gt; to email
because there are some minor things that need to be fixed.&lt;/p&gt;

&lt;h4 id=&quot;-git-status-describe-atom&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ git status describe-atom&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;According to the recent “What’s cooking” email, the describe atom patches
are ready to be merged into next. A lot of cool discussions happened
during the reviews. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Junio suggested the possiblity of having unit tests written for the
functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_arg_value()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_bool_arg()&lt;/code&gt;.
The people at Google have been working on adding a unit test suite to
Git, written in C. Unit tests help in testing individual functions, which
is obviously a great advantage. More info about the discussion around
the adding unit tests to Git are these &lt;a href=&quot;https://lore.kernel.org/git/20230427175007.902278-1-calvinwan@google.com/&quot;&gt;patches&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Junio said that these functions would be kind of an ideal candidate for
something to run unit tests on as these functions when called can lead
to so many condidtions and we don’t really get to fully to use them
in order to test them. Also with unit tests, we have the added advantage
of documentation as unit tests give a clear understanding of what a
particular function needs to do. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another thing that was discussed was to generalize the way we parse
multiple options as we are beginning to see them more often in the
code. Junio suggested that we do something similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_config_key()&lt;/code&gt;
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.c&lt;/code&gt; in which case , we use this to parse config options like&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;section.&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;subsection.&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;?key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I learnt quite a bit from these reviews and the discussions around them. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The patches that are to be merged in next are in &lt;a href=&quot;https://lore.kernel.org/git/20230723162717.68123-1-five231003@gmail.com/&quot;&gt;v4&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve also made a bit of a progress on using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;
where I worked on changing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt;, which converts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;
placeholders to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; atoms, to return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref format&lt;/code&gt; instead
of the the placeholder length, in hope that this can then be use to pass
onto a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; function to grab the necessary values instead of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; doing all the work. Although pretty printing must be done
by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve started actually implementing the mailmap options into ref-filter. Christian, Hariom and I have decided that we will go with options spelled out as, for example,</summary></entry><entry><title type="html">Week 8: The .mailmap options</title><link href="http://localhost:4000/2023/07/19/week8.html" rel="alternate" type="text/html" title="Week 8: The .mailmap options" /><published>2023-07-19T00:00:00+05:30</published><updated>2023-07-19T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/19/week8</id><content type="html" xml:base="http://localhost:4000/2023/07/19/week8.html">&lt;p&gt;This week I started the work on adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;.
I had been reading the &lt;a href=&quot;https://lore.kernel.org/git/20220718195102.66321-1-siddharthasthana31@gmail.com/&quot;&gt;patches&lt;/a&gt; that Siddharth Asthana sent in regards
to adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These patches are particularly interesting because of refactoring they do
before the actual addition of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt;. The refactoring
is done so that we can grab the headers of commits (or tags)
effectively and we also make the function that does it public so that
it can be used elsewhere. The latter change is especially important, because
that means that we can use this function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; too (although to grab
only the headers and use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; for them). &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The function that does the above is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply_mailmap_to_header()&lt;/code&gt; and this can
be called in a seperate function, local to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;, which can be used to
replace the headers with their appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; entries. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It would also be natural to expect that we are able to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt;
for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailers&lt;/code&gt; in a commit or a tag as well, since these are also a part
of the commit or tag where we find names and emails. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Actually, in the same thread that the above patches were sent to,
Christian brings up a nice use case where this might matter and suggests
a possible &lt;a href=&quot;https://lore.kernel.org/git/CAP8UFD3ohjS0p02SKwqKWBK1=sVuC9+iDT4at2R9ktCUXme9rA@mail.gmail.com/&quot;&gt;starting point&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Coming to the design, I’m not really sure what to do here. There are two
ways in which we can do things: &lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Follow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat-file&lt;/code&gt; and introduce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--[no-]use-mailmap&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for-each-ref&lt;/code&gt;
possibly.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Follow &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; and add new options to say atom like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authorname)&lt;/code&gt;. So
something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(authorname:mailmap)&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second way is more verbose and I kind of prefer the first one
since we could do something like &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--use-mailmap&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(authorname) %(authoremail)&quot;&lt;/span&gt; refs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;the-work-on-describe-atom-in-ref-filter&quot;&gt;The work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The describe atom patches are currently in v3. I re-rolled with this
version which largely simplified things in how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom was
implemented in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-fitler&lt;/code&gt;. For parsing the describe options, we just
do &lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;describe_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;now. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I was worried about us &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt;ing in the right places because the
implementation before this had not really taken care of it and it was
kind of hard to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; with that implementation. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Christian suggested that we split out the option parsing code from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe_atom_parser()&lt;/code&gt; so that we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; correctly. This was really
good and this makes things easier to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;err&lt;/code&gt; whenever something goes wrong. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hariom suggested that, instead of adding new functions to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;,
we should rather refactor the functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; and make them public
so that we are able to use them here without re-implementing them. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;what-else-is-cooking&quot;&gt;What else is cooking?&lt;/h4&gt;
&lt;p&gt;I didn’t take out any time to work on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt; (related to
Hariom’s idea) this week, which is embarrasing at this point. Was a bit
busy with college work, but I did make some progress on it though. Trying
to figure out where it will fit into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty_print_commit()&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I experimented a bit with it by trying to call it in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format_commit_one()&lt;/code&gt;,
but that was a total failure. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also attended Review Club this week which discussed the addition of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(decorate:&amp;lt;options&amp;gt;)&lt;/code&gt; placeholder in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. Except for the socializing
part, I was pretty much silent and lurked in the background. I had a great
time and it was pretty fun. Thanks Glen, Jonathan, Calvin and Jacob. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">This week I started the work on adding .mailmap options to ref-filter. I had been reading the patches that Siddharth Asthana sent in regards to adding .mailmap options to cat-file.</summary></entry><entry><title type="html">Week 7: The not-so-complete describe atom</title><link href="http://localhost:4000/2023/07/12/week7.html" rel="alternate" type="text/html" title="Week 7: The not-so-complete describe atom" /><published>2023-07-12T00:00:00+05:30</published><updated>2023-07-12T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/12/week7</id><content type="html" xml:base="http://localhost:4000/2023/07/12/week7.html">&lt;p&gt;Okay. So, as I’ve written last time, I sent the patches to the mailing
list, which I thought were perfect. Turns out they weren’t. There
are many things wrong with how we implement the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom which
Junio pointed out in his &lt;a href=&quot;https://lore.kernel.org/git/xmqqbkgpdljy.fsf@gitster.g/&quot;&gt;reply&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;First of which is, when doing something like&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(describe:tags=yes)&quot;&lt;/span&gt; refs/tags/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gives an error because according to the code, we just parse for integer
values. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.h&lt;/code&gt; has a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git_parse_maybe_bool()&lt;/code&gt; which can be
used to parse values such as “yes, no, true, false”, which are perfectly
valid but are not handled by the current code. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Second, we can’t parse multiple options&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(describe:tags=yes,abbrev=14)&quot;&lt;/span&gt; refs/tags/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;will give an error saying that the boolean arg for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt; is not proper
or something similar for anything which is used in place of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tags&lt;/code&gt;. We
can overcome this by properly parsing the options, probably something
similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Third is the clarity of the data structure we use as the basis of the
describe atom&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_BARE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_TAGS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_ABBREV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_MATCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D_EXCLUDE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tagbool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One can’t really tell where we are using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tagbool&lt;/code&gt; (a very bad variable
name), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;length&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern&lt;/code&gt; exactly w.r.t. its corresponding option.
Also, for obvious reasons, this struct doesn’t really work for multiple
options we are discussed above. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from these, Junio also suggested that we document this atom in a
different way which would be more clear and I agree. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;a-possible-solution&quot;&gt;A possible solution&lt;/h4&gt;

&lt;p&gt;So, coming to fixing this mess, I have some work locally which is similar
to the approach taken in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; (which I haven’t pushed to my fork yet
since for some reason it’s sending SIGSEGV, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gdb&lt;/code&gt; here I come). We introduce
two new functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_arg_value()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_atom_bool_arg()&lt;/code&gt;,
which are similar to the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_placeholder_arg_value()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match_placeholder_bool_arg()&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;These functions are used for parsing multiple option arguments given to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty=&lt;/code&gt;, for example in the case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailers&lt;/code&gt;, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;trailers&lt;/code&gt; can
take multiple sub-options like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;seperator&lt;/code&gt; at a time. That is&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(trailers:key=Helped-By,separator=%x2C )&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where we get all the trailers with “Helped-By”, separated by a comma. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; also makes use of these functions
to parse multiple options so I think making use of them &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; would
be great in the sense that future atoms may also of make use of these. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t really discussed this Christian and Hariom yet, regarding the
apporach. I’ll do it once I have pushed things. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;whats-happening-with-the-other-stuff&quot;&gt;What’s happening with the other stuff?&lt;/h4&gt;

&lt;p&gt;I have started working on Hariom’s idea again while waiting for the
review on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom and I am mainly focusing on the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convert_format()&lt;/code&gt; function which plays the central role in the whole
thing. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The function basically converts any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; format into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;
format, if there is a map. We can use this directly in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; and
tweak the other functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; to do things accordingly. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I haven’t pushed this to my fork yet as the code doesn’t really work
as I intended it to, so I need to make some changes. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Coming to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options, I haven’t worked on them this week but
I should be able to it once v2 of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom goes out. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Apart from these, according to the latest “What’s Cooking” email (Jul 10),
the patch regarding the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe:abbrev=&amp;lt;number&amp;gt;&lt;/code&gt; test has been merged to
master and the patches regarding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt; atom made it into next and
are now on their way to master which is cool. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hoping that v2 of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom is much better. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">Okay. So, as I’ve written last time, I sent the patches to the mailing list, which I thought were perfect. Turns out they weren’t. There are many things wrong with how we implement the describe atom which Junio pointed out in his reply.</summary></entry><entry><title type="html">Week 6: The complete describe atom</title><link href="http://localhost:4000/2023/07/05/week6.html" rel="alternate" type="text/html" title="Week 6: The complete describe atom" /><published>2023-07-05T00:00:00+05:30</published><updated>2023-07-05T00:00:00+05:30</updated><id>http://localhost:4000/2023/07/05/week6</id><content type="html" xml:base="http://localhost:4000/2023/07/05/week6.html">&lt;p&gt;This week has almost only been cleaning up the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom code and
making it ready to be a proper patch series that can be sent out to the
mailing list. So no new work has been put into either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; or
Hariom’s idea, which is kind of sad because I have been postponing it
for a while now, especially Hariom’s idea but things should settle in
this week. &lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;interesting-stuff&quot;&gt;Interesting stuff&lt;/h4&gt;
&lt;p&gt;A couple of interesting things popped up while I was cleaning up the
“describe” atom code. The first one being that a totally unrelated test
was failing on linux-sha256 (CI). The reason this test was failing,
particularly on linux-sha256 was because of the change in the raw:size
of certain objects due to new commits and tags that were added as part
of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; tests. This would re-arrange the refs when sorting and
hence the test would fail. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;So, I wrote another &lt;a href=&quot;https://github.com/five-sh/git/commit/43cd3eef3cd55b8c78cc619050ae7c98430b7f05&quot;&gt;commit&lt;/a&gt; to fix this. This commit takes the approach of
making all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; related tests run on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe-repo&lt;/code&gt; (a repo
exclusively for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; tests to run), instead of the usual main repo
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t6300-for-each-ref.sh&lt;/code&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I originally thought to squash this commit onto the duplication commit,
but Christian suggested that it deserves an explanation and I agree with
him. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I sent these patches to the mailing list (this fix commit on top of the
duplication commit). They can be read on this &lt;a href=&quot;https://lore.kernel.org/git/20230705175942.21090-1-five231003@gmail.com/&quot;&gt;thread&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another thing I came across was the output of the following command when
run in the trash directory of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t6300&lt;/code&gt; right after the “Verify sorts with
raw:size” test.
&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-each-ref&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;%(refname) %(raw:size)&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;raw:size refs/heads/main refs/myblobs/ refs/mytrees/first
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;which gives&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;refs/myblobs/blob8 0
refs/myblobs/first 17
refs/myblobs/blob7 2
refs/myblobs/blob4 3
refs/heads/main 446
refs/myblobs/blob1 5
refs/myblobs/blob2 5
refs/myblobs/blob3 6
refs/myblobs/blob5 6
refs/myblobs/blob6 6
refs/mytrees/first 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;which is strange because the sorting seems to happens while only taking
into account the first digit of raw:size. I don’t know if this is expected
and if it was not, then I would need to dig a little more deeper for this.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;According to the “What’s cooking” email sent on June 30, the change in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(describe:abbrev=...)&lt;/code&gt; test in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t4205-log-pretty-formats.sh&lt;/code&gt; is on its
way to master. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Christian sent out a reply to “What’s cooking” saying that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;signature&lt;/code&gt;
atom patches where ready to be merged (they had been on “Needs review” for
a while now) since they had seen so many changes and the current version
was looking good. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I have also made sure to change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%(describe:abbrev=...)&lt;/code&gt; test in the
duplication of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; too. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">This week has almost only been cleaning up the describe atom code and making it ready to be a proper patch series that can be sent out to the mailing list. So no new work has been put into either .mailmap or Hariom’s idea, which is kind of sad because I have been postponing it for a while now, especially Hariom’s idea but things should settle in this week.</summary></entry><entry><title type="html">Week 5: Getting familiar with .mailmap</title><link href="http://localhost:4000/2023/06/28/week5.html" rel="alternate" type="text/html" title="Week 5: Getting familiar with .mailmap" /><published>2023-06-28T00:00:00+05:30</published><updated>2023-06-28T00:00:00+05:30</updated><id>http://localhost:4000/2023/06/28/week5</id><content type="html" xml:base="http://localhost:4000/2023/06/28/week5.html">&lt;p&gt;As already mentioned in my last week’s post, I’ve been working on the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;describe&lt;/code&gt; atom. This week, I worked on improving it and fixing parts
of the tests based on the comments that Christian made on the first
version. The changes can be read on the branch &lt;a href=&quot;https://github.com/five-sh/git/commits/describe2&quot;&gt;“describe2”&lt;/a&gt;. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The tests still don’t seem to pass. After spending considerable
amount of time redoing them and trying to understand what was actually
going on, I asked Christian. He took a look at my branch and gave a
really nice explanation as to what was really going on and how we can
possibly fix it. So I think we can fix it now. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I also received comments on “t4205-describe-fix” and changed it (just
some minor improvements on the way we do things). The changes can be
read on the branch &lt;a href=&quot;https://github.com/five-sh/git/commits/t4205-describe-fix3&quot;&gt;“t4205-describe-fix3”&lt;/a&gt;. I have also sent this patch
to the &lt;a href=&quot;https://lore.kernel.org/git/20230628181753.10384-1-five231003@gmail.com/&quot;&gt;mailing list&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-mailmap-options&quot;&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options&lt;/h4&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; file is a file which has the author and their respective
email information. Git basically looks for this file in the top-level
of the repo by default or if the config variables for the path are set,
then it uses that file. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This file is very useful when the repo consists of various authors and
committers and if any of them have more than one way in which their name
is set or if they have multiple emails. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options are used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pretty&lt;/code&gt; when displaying author names,
author emails, committer names, commiter emails and for reflog identity
name and email. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; doesn’t yet have the reflog options,
the inital attempt would be so that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt; can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; for
author names and emails and committer names and emails. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To make use of these options in through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref-filter&lt;/code&gt;, Christian suggested
to read through the patches that Siddharth Asthana sent regarding the
integration of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.mailmap&lt;/code&gt; options in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git cat-file&lt;/code&gt;. His work on it can be
read &lt;a href=&quot;https://lore.kernel.org/git/20220630142444.651948-1-siddharthasthana31@gmail.com/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://lore.kernel.org/git/20220916205946.178925-1-siddharthasthana31@gmail.com/&quot;&gt;here&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I’ve spent this week reading through his work on this and thinking about
the possible approach that can be taken.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Hariom’s idea is still cooking in my local branch, nothing interesting to
show yet but this will not be the case next week.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;‘til next time, &lt;br /&gt;
Kousik&lt;/p&gt;</content><author><name></name></author><summary type="html">As already mentioned in my last week’s post, I’ve been working on the describe atom. This week, I worked on improving it and fixing parts of the tests based on the comments that Christian made on the first version. The changes can be read on the branch “describe2”.</summary></entry></feed>